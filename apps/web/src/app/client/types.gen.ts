// This file is auto-generated by @hey-api/openapi-ts

export type GetPetPetsData = {
    body?: never;
    path?: never;
    query: {
        page: string | number;
        pageSize: string | number;
    };
    url: '/pet/pets';
};

export type GetPetPetsResponses = {
    /**
     * Success
     */
    200: {
        pets: Array<{
            id: string;
            name: string;
            birthdate: string;
            observations: string | null;
            sex: 'MALE' | 'FEMALE' | 'UNKNOWN';
            breedId: string;
            speciesId: string;
        }>;
        /**
         * Total number of pets in the database
         */
        total: number;
    };
};

export type GetPetPetsResponse = GetPetPetsResponses[keyof GetPetPetsResponses];

export type PostPetPetsData = {
    body: {
        name: string;
        birthdate: string;
        observations?: string;
        sex: 'MALE' | 'FEMALE' | 'UNKNOWN';
        breedId: string;
        speciesId: string;
    };
    path?: never;
    query?: never;
    url: '/pet/pets';
};

export type PostPetPetsResponses = {
    /**
     * Success
     */
    200: {
        id: string;
        name: string;
        birthdate: string;
        observations: string | null;
        sex: 'MALE' | 'FEMALE' | 'UNKNOWN';
        breedId: string;
        speciesId: string;
    };
};

export type PostPetPetsResponse = PostPetPetsResponses[keyof PostPetPetsResponses];

export type GetPetPetsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/pet/pets/{id}';
};

export type GetPetPetsByIdResponses = {
    /**
     * Success
     */
    200: {
        id: string;
        name: string;
        birthdate: string;
        observations: string | null;
        sex: 'MALE' | 'FEMALE' | 'UNKNOWN';
        breedId: string;
        speciesId: string;
    };
};

export type GetPetPetsByIdResponse = GetPetPetsByIdResponses[keyof GetPetPetsByIdResponses];

export type PostPetBreedsData = {
    body: {
        name: string;
        speciesId: string;
    };
    path?: never;
    query?: never;
    url: '/pet/breeds';
};

export type PostPetBreedsResponses = {
    /**
     * Success
     */
    200: {
        name: string;
        speciesId: string;
    };
};

export type PostPetBreedsResponse = PostPetBreedsResponses[keyof PostPetBreedsResponses];

export type PostPetSpeciesData = {
    body: {
        name: string;
    };
    path?: never;
    query?: never;
    url: '/pet/species';
};

export type PostPetSpeciesResponses = {
    /**
     * Success
     */
    200: {
        id: string;
        name: string;
    };
};

export type PostPetSpeciesResponse = PostPetSpeciesResponses[keyof PostPetSpeciesResponses];

export type PostHealthPatientsData = {
    body: {
        name: string;
        birthdate: string;
        medicalObservations?: string;
        sex: 'MALE' | 'FEMALE' | 'UNKNOWN';
        breed: string;
        specie: string;
    };
    path?: never;
    query?: never;
    url: '/health/patients';
};

export type PostHealthPatientsResponses = {
    200: unknown;
};

export type PostAuthUsersRegisterData = {
    body: {
        email: string;
        password: string;
        name: string;
        birthdate: string;
    };
    path?: never;
    query?: never;
    url: '/auth/users/register';
};

export type PostAuthUsersRegisterErrors = {
    /**
     * User already exists
     */
    409: {
        message?: string;
        name?: string;
    };
};

export type PostAuthUsersRegisterError = PostAuthUsersRegisterErrors[keyof PostAuthUsersRegisterErrors];

export type PostAuthUsersRegisterResponses = {
    /**
     * User successfully registered and token generated.
     */
    201: {
        user: {
            id: string;
            name?: string;
            email: string;
            birthdate?: string;
        };
        /**
         * The JWT authentication token.
         */
        token: string;
        /**
         * The expiration time of the token in seconds.
         */
        expiresIn: number;
    };
};

export type PostAuthUsersRegisterResponse = PostAuthUsersRegisterResponses[keyof PostAuthUsersRegisterResponses];

export type PostAuthUsersLoginData = {
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/users/login';
};

export type PostAuthUsersLoginErrors = {
    /**
     * Invalid credentials provided.
     */
    401: {
        message?: string;
        name?: string;
    };
};

export type PostAuthUsersLoginError = PostAuthUsersLoginErrors[keyof PostAuthUsersLoginErrors];

export type PostAuthUsersLoginResponses = {
    /**
     * Successful login and token generation.
     */
    200: {
        /**
         * The JWT authentication token.
         */
        token: string;
        /**
         * The expiration time of the token in seconds.
         */
        expiresIn: number;
    };
};

export type PostAuthUsersLoginResponse = PostAuthUsersLoginResponses[keyof PostAuthUsersLoginResponses];

export type ClientOptions = {
    baseUrl: `${string}://swagger.json` | (string & {});
};