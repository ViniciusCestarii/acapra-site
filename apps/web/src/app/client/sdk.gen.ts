// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetPetPetsData, GetPetPetsResponse, PostPetPetsData, PostPetPetsResponse, PostPetPetsError, GetPetPetsByIdData, GetPetPetsByIdResponse, GetPetPetsByIdError, PostPetPetsByIdImagesData, PostPetPetsByIdImagesResponse, PostPetPetsByIdImagesError, PostPetBreedsData, PostPetBreedsResponse, PostPetBreedsError, PostPetSpeciesData, PostPetSpeciesResponse, PostPetSpeciesError, PostHealthPatientsData, PostHealthPatientsResponse, PostHealthPatientsError, PostAuthUsersRegisterData, PostAuthUsersRegisterResponse, PostAuthUsersRegisterError, PostAuthUsersLoginData, PostAuthUsersLoginResponse, PostAuthUsersLoginError, PostAuthUsersLogoutData, PostAuthUsersLogoutResponse, PostAuthUsersLogoutError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List pets
 * List paginated pets
 */
export const getPetPets = <ThrowOnError extends boolean = false>(options: Options<GetPetPetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPetPetsResponse, unknown, ThrowOnError>({
        url: '/pet/pets',
        ...options
    });
};

/**
 * Create pet
 * Create a new pet
 */
export const postPetPets = <ThrowOnError extends boolean = false>(options: Options<PostPetPetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPetPetsResponse, PostPetPetsError, ThrowOnError>({
        url: '/pet/pets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Find pet by id
 * Find a pet by its id
 */
export const getPetPetsById = <ThrowOnError extends boolean = false>(options: Options<GetPetPetsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPetPetsByIdResponse, GetPetPetsByIdError, ThrowOnError>({
        url: '/pet/pets/{id}',
        ...options
    });
};

/**
 * Upload pet image
 * Upload a new image for a pet
 */
export const postPetPetsByIdImages = <ThrowOnError extends boolean = false>(options: Options<PostPetPetsByIdImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPetPetsByIdImagesResponse, PostPetPetsByIdImagesError, ThrowOnError>({
        url: '/pet/pets/{id}/images',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create breed
 * Create a new breed
 */
export const postPetBreeds = <ThrowOnError extends boolean = false>(options: Options<PostPetBreedsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPetBreedsResponse, PostPetBreedsError, ThrowOnError>({
        url: '/pet/breeds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create specie
 * Create a new specie
 */
export const postPetSpecies = <ThrowOnError extends boolean = false>(options: Options<PostPetSpeciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPetSpeciesResponse, PostPetSpeciesError, ThrowOnError>({
        url: '/pet/species',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create patient
 * Create a new patient
 */
export const postHealthPatients = <ThrowOnError extends boolean = false>(options: Options<PostHealthPatientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostHealthPatientsResponse, PostHealthPatientsError, ThrowOnError>({
        url: '/health/patients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register
 * Register a new user and return a JWT token for authentication.
 */
export const postAuthUsersRegister = <ThrowOnError extends boolean = false>(options: Options<PostAuthUsersRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthUsersRegisterResponse, PostAuthUsersRegisterError, ThrowOnError>({
        url: '/auth/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login
 * Login user and retrieve an authentication token.
 */
export const postAuthUsersLogin = <ThrowOnError extends boolean = false>(options: Options<PostAuthUsersLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthUsersLoginResponse, PostAuthUsersLoginError, ThrowOnError>({
        url: '/auth/users/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout
 * Logout the user
 */
export const postAuthUsersLogout = <ThrowOnError extends boolean = false>(options?: Options<PostAuthUsersLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthUsersLogoutResponse, PostAuthUsersLogoutError, ThrowOnError>({
        url: '/auth/users/logout',
        ...options
    });
};