// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getPetPets, postPetPets, getPetPetsById, postPetPetsByIdImages, postPetBreeds, postPetSpecies, postHealthPatients, postAuthUsersRegister, postAuthUsersLogin, postAuthUsersLogout } from '../sdk.gen';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type DefaultError, type UseMutationOptions } from '@tanstack/react-query';
import type { GetPetPetsData, GetPetPetsResponse, PostPetPetsData, PostPetPetsError, PostPetPetsResponse, GetPetPetsByIdData, PostPetPetsByIdImagesData, PostPetPetsByIdImagesError, PostPetPetsByIdImagesResponse, PostPetBreedsData, PostPetBreedsError, PostPetBreedsResponse, PostPetSpeciesData, PostPetSpeciesError, PostPetSpeciesResponse, PostHealthPatientsData, PostHealthPatientsError, PostHealthPatientsResponse, PostAuthUsersRegisterData, PostAuthUsersRegisterError, PostAuthUsersRegisterResponse, PostAuthUsersLoginData, PostAuthUsersLoginError, PostAuthUsersLoginResponse, PostAuthUsersLogoutData, PostAuthUsersLogoutError, PostAuthUsersLogoutResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getPetPetsQueryKey = (options: Options<GetPetPetsData>) => createQueryKey('getPetPets', options);

export const getPetPetsOptions = (options: Options<GetPetPetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPetPets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPetPetsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getPetPetsInfiniteQueryKey = (options: Options<GetPetPetsData>): QueryKey<Options<GetPetPetsData>> => createQueryKey('getPetPets', options, true);

export const getPetPetsInfiniteOptions = (options: Options<GetPetPetsData>) => {
    return infiniteQueryOptions<GetPetPetsResponse, DefaultError, InfiniteData<GetPetPetsResponse>, QueryKey<Options<GetPetPetsData>>, string | number | Pick<QueryKey<Options<GetPetPetsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetPetPetsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getPetPets({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPetPetsInfiniteQueryKey(options)
    });
};

export const postPetPetsQueryKey = (options: Options<PostPetPetsData>) => createQueryKey('postPetPets', options);

export const postPetPetsOptions = (options: Options<PostPetPetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPetPets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPetPetsQueryKey(options)
    });
};

export const postPetPetsMutation = (options?: Partial<Options<PostPetPetsData>>) => {
    const mutationOptions: UseMutationOptions<PostPetPetsResponse, PostPetPetsError, Options<PostPetPetsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPetPets({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPetPetsByIdQueryKey = (options: Options<GetPetPetsByIdData>) => createQueryKey('getPetPetsById', options);

export const getPetPetsByIdOptions = (options: Options<GetPetPetsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPetPetsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPetPetsByIdQueryKey(options)
    });
};

export const postPetPetsByIdImagesQueryKey = (options: Options<PostPetPetsByIdImagesData>) => createQueryKey('postPetPetsByIdImages', options);

export const postPetPetsByIdImagesOptions = (options: Options<PostPetPetsByIdImagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPetPetsByIdImages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPetPetsByIdImagesQueryKey(options)
    });
};

export const postPetPetsByIdImagesMutation = (options?: Partial<Options<PostPetPetsByIdImagesData>>) => {
    const mutationOptions: UseMutationOptions<PostPetPetsByIdImagesResponse, PostPetPetsByIdImagesError, Options<PostPetPetsByIdImagesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPetPetsByIdImages({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postPetBreedsQueryKey = (options: Options<PostPetBreedsData>) => createQueryKey('postPetBreeds', options);

export const postPetBreedsOptions = (options: Options<PostPetBreedsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPetBreeds({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPetBreedsQueryKey(options)
    });
};

export const postPetBreedsMutation = (options?: Partial<Options<PostPetBreedsData>>) => {
    const mutationOptions: UseMutationOptions<PostPetBreedsResponse, PostPetBreedsError, Options<PostPetBreedsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPetBreeds({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postPetSpeciesQueryKey = (options: Options<PostPetSpeciesData>) => createQueryKey('postPetSpecies', options);

export const postPetSpeciesOptions = (options: Options<PostPetSpeciesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPetSpecies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPetSpeciesQueryKey(options)
    });
};

export const postPetSpeciesMutation = (options?: Partial<Options<PostPetSpeciesData>>) => {
    const mutationOptions: UseMutationOptions<PostPetSpeciesResponse, PostPetSpeciesError, Options<PostPetSpeciesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPetSpecies({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postHealthPatientsQueryKey = (options: Options<PostHealthPatientsData>) => createQueryKey('postHealthPatients', options);

export const postHealthPatientsOptions = (options: Options<PostHealthPatientsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postHealthPatients({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postHealthPatientsQueryKey(options)
    });
};

export const postHealthPatientsMutation = (options?: Partial<Options<PostHealthPatientsData>>) => {
    const mutationOptions: UseMutationOptions<PostHealthPatientsResponse, PostHealthPatientsError, Options<PostHealthPatientsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postHealthPatients({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthUsersRegisterQueryKey = (options: Options<PostAuthUsersRegisterData>) => createQueryKey('postAuthUsersRegister', options);

export const postAuthUsersRegisterOptions = (options: Options<PostAuthUsersRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthUsersRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthUsersRegisterQueryKey(options)
    });
};

export const postAuthUsersRegisterMutation = (options?: Partial<Options<PostAuthUsersRegisterData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthUsersRegisterResponse, PostAuthUsersRegisterError, Options<PostAuthUsersRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthUsersRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthUsersLoginQueryKey = (options: Options<PostAuthUsersLoginData>) => createQueryKey('postAuthUsersLogin', options);

export const postAuthUsersLoginOptions = (options: Options<PostAuthUsersLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthUsersLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthUsersLoginQueryKey(options)
    });
};

export const postAuthUsersLoginMutation = (options?: Partial<Options<PostAuthUsersLoginData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthUsersLoginResponse, PostAuthUsersLoginError, Options<PostAuthUsersLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthUsersLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthUsersLogoutQueryKey = (options?: Options<PostAuthUsersLogoutData>) => createQueryKey('postAuthUsersLogout', options);

export const postAuthUsersLogoutOptions = (options?: Options<PostAuthUsersLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthUsersLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthUsersLogoutQueryKey(options)
    });
};

export const postAuthUsersLogoutMutation = (options?: Partial<Options<PostAuthUsersLogoutData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthUsersLogoutResponse, PostAuthUsersLogoutError, Options<PostAuthUsersLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthUsersLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};