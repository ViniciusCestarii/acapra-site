import { cache } from "react";

// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  GetPetPetsData,
  GetPetPetsResponse,
  PostPetPetsData,
  PostPetPetsResponse,
  PostPetPetsError,
  PutPetPetsData,
  PutPetPetsResponse,
  PutPetPetsError,
  DeletePetPetsByIdData,
  DeletePetPetsByIdResponse,
  DeletePetPetsByIdError,
  GetPetPetsByIdData,
  GetPetPetsByIdResponse,
  GetPetPetsByIdError,
  PostPetPetsByIdImagesData,
  PostPetPetsByIdImagesResponse,
  PostPetPetsByIdImagesError,
  DeletePetPetsImagesByIdData,
  DeletePetPetsImagesByIdResponse,
  DeletePetPetsImagesByIdError,
  PostPetBreedsData,
  PostPetBreedsResponse,
  PostPetBreedsError,
  PutPetBreedsData,
  PutPetBreedsResponse,
  PutPetBreedsError,
  DeletePetBreedsByIdData,
  DeletePetBreedsByIdResponse,
  DeletePetBreedsByIdError,
  GetPetSpeciesByIdBreedsData,
  GetPetSpeciesByIdBreedsResponse,
  GetPetSpeciesByIdBreedsError,
  GetPetSpeciesData,
  GetPetSpeciesResponse,
  PostPetSpeciesData,
  PostPetSpeciesResponse,
  PostPetSpeciesError,
  PutPetSpeciesData,
  PutPetSpeciesResponse,
  PutPetSpeciesError,
  DeletePetSpeciesByIdData,
  DeletePetSpeciesByIdResponse,
  DeletePetSpeciesByIdError,
  PostHealthPatientsData,
  PostHealthPatientsResponse,
  PostHealthPatientsError,
  PostAuthUsersRegisterData,
  PostAuthUsersRegisterResponse,
  PostAuthUsersRegisterError,
  PostAuthUsersLoginData,
  PostAuthUsersLoginResponse,
  PostAuthUsersLoginError,
  PostAuthUsersLogoutData,
  PostAuthUsersLogoutResponse,
  PostAuthUsersLogoutError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List pets
 * List paginated pets
 */
export const getPetPets = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<GetPetPetsData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPetPetsResponse,
      unknown,
      ThrowOnError
    >({
      url: "/pet/pets",
      ...options,
    });
  },
);

/**
 * Create pet
 * Create a new pet
 */
export const postPetPets = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PostPetPetsData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).post<
      PostPetPetsResponse,
      PostPetPetsError,
      ThrowOnError
    >({
      url: "/pet/pets",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Update pet
 * Update a pet
 */
export const putPetPets = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PutPetPetsData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).put<
      PutPetPetsResponse,
      PutPetPetsError,
      ThrowOnError
    >({
      url: "/pet/pets",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Delete pet
 * Delete a pet by its id
 */
export const deletePetPetsById = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<DeletePetPetsByIdData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeletePetPetsByIdResponse,
      DeletePetPetsByIdError,
      ThrowOnError
    >({
      url: "/pet/pets/{id}",
      ...options,
    });
  },
);

/**
 * Find pet by id
 * Find a pet by its id
 */
export const getPetPetsById = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<GetPetPetsByIdData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPetPetsByIdResponse,
      GetPetPetsByIdError,
      ThrowOnError
    >({
      url: "/pet/pets/{id}",
      ...options,
    });
  },
);

/**
 * Upload pet image
 * Upload a new image for a pet
 */
export const postPetPetsByIdImages = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PostPetPetsByIdImagesData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).post<
      PostPetPetsByIdImagesResponse,
      PostPetPetsByIdImagesError,
      ThrowOnError
    >({
      url: "/pet/pets/{id}/images",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Delete pet image
 * Delete a pet image
 */
export const deletePetPetsImagesById = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<DeletePetPetsImagesByIdData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeletePetPetsImagesByIdResponse,
      DeletePetPetsImagesByIdError,
      ThrowOnError
    >({
      url: "/pet/pets/images/{id}",
      ...options,
    });
  },
);

/**
 * Create breed
 * Create a new breed
 */
export const postPetBreeds = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PostPetBreedsData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).post<
      PostPetBreedsResponse,
      PostPetBreedsError,
      ThrowOnError
    >({
      url: "/pet/breeds",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Update breed
 * Update a breed
 */
export const putPetBreeds = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PutPetBreedsData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).put<
      PutPetBreedsResponse,
      PutPetBreedsError,
      ThrowOnError
    >({
      url: "/pet/breeds",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Delete a breed
 * Delete a breed by its id
 */
export const deletePetBreedsById = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<DeletePetBreedsByIdData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeletePetBreedsByIdResponse,
      DeletePetBreedsByIdError,
      ThrowOnError
    >({
      url: "/pet/breeds/{id}",
      ...options,
    });
  },
);

/**
 * Find all breeds by specie
 * Find all breeds by specie
 */
export const getPetSpeciesByIdBreeds = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<GetPetSpeciesByIdBreedsData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).get<
      GetPetSpeciesByIdBreedsResponse,
      GetPetSpeciesByIdBreedsError,
      ThrowOnError
    >({
      url: "/pet/species/{id}/breeds",
      ...options,
    });
  },
);

/**
 * Find all species
 * Find all species
 */
export const getPetSpecies = cache(
  <ThrowOnError extends boolean = false>(
    options?: Options<GetPetSpeciesData, ThrowOnError>,
  ) => {
    return (options?.client ?? _heyApiClient).get<
      GetPetSpeciesResponse,
      unknown,
      ThrowOnError
    >({
      url: "/pet/species",
      ...options,
    });
  },
);

/**
 * Create specie
 * Create a new specie
 */
export const postPetSpecies = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PostPetSpeciesData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).post<
      PostPetSpeciesResponse,
      PostPetSpeciesError,
      ThrowOnError
    >({
      url: "/pet/species",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Update specie
 * Update a specie
 */
export const putPetSpecies = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PutPetSpeciesData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).put<
      PutPetSpeciesResponse,
      PutPetSpeciesError,
      ThrowOnError
    >({
      url: "/pet/species",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Delete specie
 * Delete a specie
 */
export const deletePetSpeciesById = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<DeletePetSpeciesByIdData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).delete<
      DeletePetSpeciesByIdResponse,
      DeletePetSpeciesByIdError,
      ThrowOnError
    >({
      url: "/pet/species/{id}",
      ...options,
    });
  },
);

/**
 * Create patient
 * Create a new patient
 */
export const postHealthPatients = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PostHealthPatientsData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).post<
      PostHealthPatientsResponse,
      PostHealthPatientsError,
      ThrowOnError
    >({
      url: "/health/patients",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Register
 * Register a new user and return a JWT token for authentication.
 */
export const postAuthUsersRegister = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PostAuthUsersRegisterData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).post<
      PostAuthUsersRegisterResponse,
      PostAuthUsersRegisterError,
      ThrowOnError
    >({
      url: "/auth/users/register",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Login
 * Login user and retrieve an authentication token.
 */
export const postAuthUsersLogin = cache(
  <ThrowOnError extends boolean = false>(
    options: Options<PostAuthUsersLoginData, ThrowOnError>,
  ) => {
    return (options.client ?? _heyApiClient).post<
      PostAuthUsersLoginResponse,
      PostAuthUsersLoginError,
      ThrowOnError
    >({
      url: "/auth/users/login",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  },
);

/**
 * Logout
 * Logout the user
 */
export const postAuthUsersLogout = cache(
  <ThrowOnError extends boolean = false>(
    options?: Options<PostAuthUsersLogoutData, ThrowOnError>,
  ) => {
    return (options?.client ?? _heyApiClient).post<
      PostAuthUsersLogoutResponse,
      PostAuthUsersLogoutError,
      ThrowOnError
    >({
      url: "/auth/users/logout",
      ...options,
    });
  },
);
